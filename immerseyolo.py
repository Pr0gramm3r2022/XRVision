# -*- coding: utf-8 -*-
"""ImmerseYOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qz8gQ87a90Xw9WXhpFWD5U6m06v_OPlX
"""
# you need to run these commands and pip install torch, torchvision, opencv, torch.nn, torch.nn.functional, and torchvision to run this project
'''!git clone https://github.com/ultralytics/ultralytics

!pip install ultralytics

!pip install roboflow
'''
from roboflow import Roboflow
rf = Roboflow(api_key="lz75dnUImtJFgPqQmIry")
project = rf.workspace("hackathon-bmnsk").project("tree-and-orchards")
version = project.version(2)
dataset = version.download("coco")

from roboflow import Roboflow

import ultralytics

from ultralytics import YOLO

import torch.onnx

# Load a pretrained YOLO11n model
model = YOLO("yolo11n.pt")

# Train the model on the COCO8 dataset for 100 epochs
train_results = model.train(
    data="coco8.yaml",  # Path to dataset configuration file
    epochs=50,  # Number of training epochs
    imgsz=640,  # Image size for training
    device="cpu",  # Device to run on (e.g., 'cpu', 0, [0,1,2,3])
)

# Evaluate the model's performance on the validation set
metrics = model.val()

# Perform object detection on an image
results = model("ImmerseTestImage2.jpeg")  # Predict on an image
#give a sample image input.
results[0].show()  # Display results

# Export the model to ONNX format for deployment
path = model.export(format="onnx")  # Returns the path to the exported model

import torch
import torch.onnx

onnx_path = "model.onnx"  # Or any desired path
# Export the ONNX model
torch.onnx.export(model,
                  results,
                  onnx_path,
                  export_params=True,
                  opset_version=11, # Choose an appropriate opset version
                  do_constant_folding=True,
                  input_names=['input'],
                  output_names=['output'])

print(f"ONNX model saved to: {onnx_path}")