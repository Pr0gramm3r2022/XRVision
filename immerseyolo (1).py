# -*- coding: utf-8 -*-
"""ImmerseYOLO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qz8gQ87a90Xw9WXhpFWD5U6m06v_OPlX
"""

#must run these commands in the shell for this model to run
#the model is also dependent on pytorch, opencv, torch.nn, torch.nn.functional, and torchvision
'''!git clone https://github.com/ultralytics/ultralytics

!pip install ultralytics

!pip install roboflow'''

from roboflow import Roboflow

import ultralytics

from ultralytics import YOLO

import torch.onnx

# Load a pretrained YOLO11n model
model = YOLO("yolo11n.pt")

# Train the model on the COCO8 dataset for 100 epochs
train_results = model.train(
    data="coco8.yaml",  # Path to dataset configuration file
    epochs=100,  # Number of training epochs
    imgsz=640,  # Image size for training
    device="cpu",  # Device to run on (e.g., 'cpu', 0, [0,1,2,3])
)

# Evaluate the model's performance on the validation set
metrics = model.val()

# Perform object detection on an image
results = model("ImmerseTestImage2.jpeg")  # Predict on an image
#give a sample image input.
results[0].show()  # Display results

# Export the model to ONNX format for deployment
path = model.export(format="onnx")  # Returns the path to the exported model

import torch
import torch.onnx

# Load your PyTorch model
model = torch.load('yolo11n.pt') # Or however you load your model
model.eval()  # Set the model to evaluation mode

# Create a dummy input
dummy_input = torch.randn(1, 3, 224, 224) # Example input shape (batch_size, channels, height, width)

# Define the output path for the ONNX file
onnx_file_path = 'ImmerseYOLO.onnx'

# Export the model to ONNX
torch.onnx.export(model,
                  dummy_input,
                  onnx_file_path,
                  export_params=True,        # Store trained parameter weights inside the ONNX file
                  opset_version=11,          # Specify the ONNX opset version
                  do_constant_folding=True,  # Optimize the model by folding constants
                  input_names=['input'],     # Name of the input node
                  output_names=['output'])   # Name of the output node

print(f"ONNX model saved to: {onnx_file_path}")
